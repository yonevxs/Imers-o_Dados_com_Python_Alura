# Importando bibliotecas
import pandas as pd # An√°lise de Dados
import plotly.express as px # Cria√ß√£o de gr√°ficos interativos
import streamlit as st # Cria√ß√£o de dashboard
import pycountry # Cria√ß√£o do mapa

# Criando layout da p√°gina
# ------ Configura√ß√µes da P√°gina ------
# Defini o t√≠tulo da p√°gina, o √≠cone e o layout para ocupar a largura inteira

st.set_page_config(
    page_title = 'Dashboard de Sal√°rios na √Årea de Dados', # Similar ao title do HTML
    page_icon = 'üìä',  # Similar ao favicon do HTML
    layout = 'wide' # Deixa a p√°gina larga - Explicar depois
)

# --- Carregamento dos dados ---
# Importando DataFrame para usar no dashboard
df = pd.read_csv("https://raw.githubusercontent.com/vqrca/dashboard_salarios_dados/refs/heads/main/dados-imersao-final.csv")

# Criando barra lateral - Filtros
st.sidebar.header("Filtros | üõ†Ô∏è")

# Filtro - Ano
anos_disponiveis = sorted(df['ano'].unique()) # Pega os valores √∫nicos do df, na linha ano  

# sidebar tras a op√ß√£o de escolher os anos, passando como par√¢metro os anos dispon√≠veis
anos_selecionados = st.sidebar.multiselect("Ano", anos_disponiveis, default = anos_disponiveis)

# Filtro - Senioridade
senioridades_disponiveis = sorted(df['senioridade'].unique())

senioridades_selecionadas = st.sidebar.multiselect("Senioridade", senioridades_disponiveis, default=senioridades_disponiveis)

# Filtro - Contrato
contratos_disponiveis = sorted(df['contrato'].unique())
contratos_selecionados = st.sidebar.multiselect("Tipo de Contrato", contratos_disponiveis, default=contratos_disponiveis)

# Filtro - Tamanho da Empresa
tamanhos_disponiveis = sorted(df['tamanho_empresa'].unique())
tamanhos_selecionados = st.sidebar.multiselect("Tamanho da Empresa", tamanhos_disponiveis, default=tamanhos_disponiveis)

# ------ Filtragem do DataFrame  ------
# o DataFrame principal √© filtrado baseado nas sele√ß√µes feitas no sidebar
# Quando o usu√°rio entrar na p√°gina e filtrar informa√ß√µes, o df_filtrado ser√° inicializado

df_filtrado = df[
    (df['ano'].isin(anos_selecionados)) &
    (df['senioridade'].isin(senioridades_selecionadas)) &
    (df['contrato'].isin(contratos_selecionados)) &
    (df['tamanho_empresa'].isin(tamanhos_selecionados))
]

# ------ Conte√∫do Principal ------
st.title("Dashboard - Sal√°rios na √Årea de Dados | üé≤")

#Texto explicativo - Similar ao <p> em HTML
st.markdown("Explore dados sobre os sal√°rios na √°rea de Dados nos √∫ltimos anos. Utilize os filtros √† esquerda para refinar sua an√°lise.")

# ------ M√©tricas Principais (KPIs) ------ 
st.subheader("M√©tricas gerais (Sal√°rio Anual em U$D)")

if not df_filtrado.empty:
    salario_medio = df_filtrado['usd'].mean()
    salario_maximo = df_filtrado['usd'].max()
    total_registros = df_filtrado.shape[0]
    cargo_mais_frequente = df_filtrado['cargo'].mode()[0]
else:
    salario_medio, salario_mediano, salario_maximo, total_registros, cargo_mais_comum = 0, 0, 0, ""

col1, col2, col3, col4 = st.columns(4)
col1.metric("Sal√°rio m√©dio", f"${salario_medio:,.0f}")
col2.metric("Sal√°rio m√°ximo", f"${salario_maximo:,.0f}")
col3.metric("Total de registros", f"${total_registros:,}")
col4.metric("Cargo mais frequente", cargo_mais_frequente)

st.markdown("---")

# ------ Cria√ß√£o de Gr√°ficos com Plotly ------
#Subt√≠tulo
st.subheader("Gr√°ficos")

col_graf1, col_graf2 = st.columns(2)

with col_graf1:
    if not df_filtrado.empty:
        #nlargest(10) - Pega os 10 valores maiores
        top_cargos = df_filtrado.groupby('cargo')['usd'].mean().nlargest(10).sort_values(ascending=True).reset_index()

        grafico_cargos = px.bar(
            top_cargos,
            x = 'usd',
            y = 'cargo',
            # Orienta√ß√£o do Gr√°fico
            orientation = 'h',
            title = 'Top 10 - Cargos por Sal√°rio M√©dio',
            labels = {'usd': 'M√©dia salarial anual (U$D)', 'cargo': ''}
        )
        #title_x=0.1 - Move o titulo para a direita
        grafico_cargos.update_layout(title_x=0.4, yaxis={'categoryorder':'total ascending'})

        #Exibindo gr√°fico com Streamlit
        st.plotly_chart(grafico_cargos, use_container_width=True)
    else:
        st.warning("N√£o h√° nenhum dado para ser exibido no gr√°fico de cargos.")

with col_graf2:
    if not df_filtrado.empty:
        grafico_hist = px.histogram(
            df_filtrado,
            x='usd',
            nbins=30,
            title='Distribui√ß√£o de sal√°rios anuais',
            labels={'usd': 'Faixa Salarial (U$D)', 'count': ' '}
        )
        grafico_hist.update_layout(title_x=0.3)
        st.plotly_chart(grafico_hist, use_container_width=True)
    else:
        st.warning("N√£o h√° nenhum dado para ser exibido no gr√°fico de distribui√ß√£o salarial.")

col_graf3, col_graf4 = st.columns(2)

with col_graf3:
    if not df_filtrado.empty:
        remoto_contagem = df_filtrado['remoto'].value_counts().reset_index()
        remoto_contagem.columns = ['tipo_trabalho', 'quantidade']

        grafico_remoto = px.pie(
            remoto_contagem,
            names = 'tipo_trabalho',
            values = 'quantidade',
            title = 'Propor√ß√£o dos tipos de trabalho',
            hole = 0.5
        )
        grafico_remoto.update_traces(textinfo='percent+label')
        grafico_remoto.update_layout(title_x=0.1)
        st.plotly_chart(grafico_remoto, use_container_width=True)
    else:
        st.warning('Nenhum dado para ser exibido no gr√°fico de tipos de trabalho.')

with col_graf4:
    if not df_filtrado.empty:
        df_ds = df_filtrado[df_filtrado['cargo'] == 'Data Scientist']
        media_ds_pais = df_ds.groupby('residencia_iso3')['usd'].mean().round(2).reset_index()
        grafico_paises = px.choropleth(media_ds_pais,
        locations = 'residencia_iso3',
        color = 'usd',
        color_continuous_scale = 'rdylgn',
        title = 'Sal√°rio M√©dio por Pa√≠s - Data Scientist',
        labels = {'usd': 'Sal√°rio M√©dio Anual - U$D', 'residencia_iso3': 'Pa√≠s'})

        grafico_paises.update_layout(title_x = 0.1)
        st.plotly_chart(grafico_paises, use_container_width=True)
    else:
        st.warning("N√£o h√° nenhum dado para ser exibido no gr√°fico de pa√≠ses")

# ------ Tabela de Dados Detalhados ------
st.subheader("Dados Detalhados")

st.dataframe(df_filtrado)
st.markdown("Feito por Lucas Henrique Neves Sousa - Imers√£o Dados com Python - 2025")

